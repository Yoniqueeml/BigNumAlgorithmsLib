#include "BigInt.cpp"
#include <cassert>

static void TestSum() {
    BigInt num1("7771661671012755446050643784636329069923851010293200090130872533132917890211520272189984488791");
    BigInt num2("987654321");
    BigInt expected1("7771661671012755446050643784636329069923851010293200090130872533132917890211520272190972143112");
    assert(num1 + num2 == expected1);
    BigInt num3("-987654321");
    BigInt num4("-123456789");
    BigInt expected2("-1111111110");
    assert(num3+num4 == expected2);
    BigInt num5("32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230656");
    BigInt num6("-987654321");
    BigInt expected3("32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611058608576335");
    assert(num5+num6 == expected3);
    std::cout << "Sum complete" << std::endl;
}

static void TestSub() {
    BigInt num1("98765432131100730071487668866995196044410266971548403213034542752465513110073007148766886699519604441026697154840321303454275246551");
    BigInt num2("123456789");
    BigInt expected1("98765432131100730071487668866995196044410266971548403213034542752465513110073007148766886699519604441026697154840321303454151789762");
    assert(num1-num2 == expected1);
    BigInt num3("-9519604441026697154840321303454275246551311007300714876688669951960444102669715484095196044410266971548403213034542752465513110073007148766886699519604441026697154840");
    BigInt num4("-12349519604441026697154840321303454275246551311007300714876688669951960444102669715484056789");
    BigInt expected2("-9519604441026697154840321303454275246551311007300714876688669951960444102682065003699637071107421811869706667309789303776520410787883837436838659963707110742181211629");
    assert(num3-num4 == expected2);
    BigInt num5("71311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230656");
    BigInt num6("-11007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725");
    BigInt expected3("71311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088163393748997997319547319261440194419913234421782452223582293522935459169989420054142669625526812299398068490075765411186795963982664043927514091728183276491231381613664531140057994527481032424948637063132968253968941814239643753669502363179041960002294897907064692617484669527069409756722281537823560237793365955653972206013690254205676385760483423785009129129009568773365158249196255861217175754941468770107899192901200486585531250549722176218185435424782979295770416440381");
    assert(num5-num6 == expected3);
    std::cout << "Sub complete" << std::endl;
}

static void TestDivision() {
    BigInt num1("75544605064378463632906992385101029320009013087253313291789021152027218998448");
    BigInt num2("6789523525252525332525252532542454354245235432593405671489575897543892");
    BigInt expected1("11126643");
    BigInt result1 = (num1 / num2).first;
    assert(result1 == expected1);
    BigInt num3("992385101029320009013087253313291789021152027218998448");
    BigInt num4("34157498571749359831543983514538975347897398415");
    BigInt expected2("29053213");
    BigInt result2 = (num3 / num4).first;
    std::cout << "Division complete" << std::endl;
}



static void TestMultiplyColumn() {
    BigInt num1("755448463632906992385101029320009013087253313291789021152027218998448");
    BigInt num2("160573471658242280756536120561682786392883229544855414159024150717940378043659686263802057425853288220405823640532697327109845085958994515109620015715798783541864598136943626838242447001302541472010703078935546979992053541928361039587688286");
    BigInt expected1("121304982464421265283192072620221114922102064204922402324248068504353744446032514592439289207101925551139468636119806179047072571657519867504128276241225844783461437279163052028830249631305316459257959834455218002242955289671998700579944317475626834021945483214726225931063168006146285604500346426016541780128");
    assert(num1 * num2 == expected1);
    BigInt num3("-12345");
    BigInt num4("512872323782065389603805571302450888053541189849362743937955664601112789780463472");
    BigInt num34 = num3 * num4;
    BigInt expected2("-6331408837089597234658979777728756213020965988690383073914062679500737389839821561840");
    assert(num34 == expected2);
    BigInt num5("-3425123123");
    BigInt num6("-48742760707599662073683368751288381541267671607884596492411343425123123535917168300587292703270327968195403836816191855726550540240483974138496196508800681136563777508800525450716413134286208880597845544439555903609057347165824228075653612056168277466141482");
    BigInt expected3("166949956778455444395559036090573471658242280756536120561682786392883229544855414159024150717940378043659686263802057425853288220405823640532697327109845085958994515109620015715798783541864598136943626838242447001302541472010703078935546979992053541928361039587688286");
    assert(num5 * num6 == expected3);
    std::cout << "MultiplyColumn complete" << std::endl;
}

static void TestMultiplyKaratsuba() {
    BigInt num1("12345");
    BigInt num2("6789");
    BigInt expected1("83810205");
    assert(num1.karatsuba(num1,num2) == expected1);
    BigInt num3("-12345");
    BigInt num4("6789");
    BigInt expected2("-83810205");
    assert(num3.karatsuba(num3,num4) == expected2);
    BigInt num5("-12345");
    BigInt num6("-6789");
    BigInt expected3("83810205");
    assert(num5.karatsuba(num5,num6) == expected3);
    std::cout << "Karatsuba complete" << std::endl;
}

static void TestGCD() {
    BigInt num1("241345");
    BigInt num2("6545");
    BigInt expected1("5");
    assert(num1.GCD(num2) == expected1);
    BigInt num3("-24904");
    BigInt num4("23413");
    BigInt expected2("1");
    assert(num3.GCD(num4) == expected2);
    BigInt num5("-2934");
    BigInt num6("-3665463");
    BigInt expected3("3");
    assert(num5.GCD(num6) == expected3);
    BigInt num7("12315");
    BigInt num8("9138235");
    BigInt expected4("5");
    assert(num7.GCD(num8) == expected4);
    std::cout << "GCD complete" << std::endl;
}

static void TestExtendedGCD() {
    BigInt num1("24");
    BigInt num2("36");
    auto result1 = num1.extendedGCD(num1, num2);
    assert(result1.first == BigInt("12"));
    assert(result1.second.first == BigInt("-1"));
    assert(result1.second.second == BigInt("1"));

    BigInt num3("-24");
    BigInt num4("36");
    auto result2 = num3.extendedGCD(num3, num4);
    assert(result2.first == BigInt("-12"));
    assert(result2.second.first == BigInt("1"));
    assert(result2.second.second == BigInt("1"));

    BigInt num5("-24");
    BigInt num6("-36");
    auto result3 = num5.extendedGCD(num5, num6);
    assert(result3.first == BigInt("12"));
    assert(result3.second.first == BigInt("-1"));
    assert(result3.second.second == BigInt("1"));

    BigInt num7("48");
    BigInt num8("0");
    auto result4 = num7.extendedGCD(num7, num8);
    assert(result4.first == BigInt("48"));
    assert(result4.second.first == BigInt("1"));
    assert(result4.second.second == BigInt("0"));
    std::cout << "extendedGCD complete" << std::endl;
}

static void TestShiftLeft() {
    BigInt num1("12345");
    BigInt result1 = num1 << 12;
    BigInt expected1("50565120");
    assert(result1 == expected1);

    BigInt num2("-12345");
    BigInt result2 = num2 << 19;
    BigInt expected2("-6472335360");
    assert(result2 == expected2);

    BigInt num3("98765");
    BigInt result3 = num3 << 0;
    assert(result3 == num3);
    std::cout << "TestShiftLeft complete" << std::endl;
}

static void TestShiftRight() {
    BigInt num1("12346");
    BigInt result1 = num1 >> 10;
    BigInt expected1("12");
    assert(result1 == expected1);

    BigInt num2("-12340");
    BigInt result2 = num2 >> 4;
    BigInt expected2("-771");
    assert(result2 == expected2);

    BigInt num3("987651222");
    BigInt result3 = num3 >> 21;
    BigInt expected3("470");
    assert(result3 == expected3);
    std::cout << "TestShiftRight complete" << std::endl;
}

static void TestBinaryPow() {
    BigInt num1("12346");
    BigInt num2("1424");
    BigInt result1 = num1.binaryPower(num2);
    BigInt expected1("2154826097232739504237771661671012755446050643784636329069923851010293200090130872533132917890211520272189984488791174670505901551384190966934551938507022637299710553657493961345980693339692543205352595344105065802847995338306399145530373881873541564797333674469978798241083555310992641485997796822088856155701137402716317394261587580362869135699774915540761606045191437944573689163173838082603817837655851950296412628483018626835336559565148424536592317496269787873452378942879362012737229670974430709017828129557399585453438804195934352468352218885989961933312192949945859602817457290447466637640375271635850491475831735907053852907536265194579688814897590669770800566560075295961915046940014245069111719952600049183712600118169254657552666494092729396571435858147859780975502384794244219770670010606750135633229088631510002260138960433839524505834119202875967005874381291807524401370568371357614159609347135810997712059276508969536854919291509068475454350286076345078171814187891406388050439442792827632114722634102324686054339907530908381785553191030687897419834968092177064562655258726431023831927078626915848585126765664238957166539540592607550988067146047521380661215538346993434465901470291306726250272347924183097230356070615127285351897682573198386375796186574228765550487727458010389227665221261928994007962527300792034703804873569660870960154750667652399566101267696760694721867383973529507625344470477774400408048198943380600700196064940552485509909705968644029735125679365090402631833317404782113485654286960131617420444713537869348640505382887174938898366918814733910123038886908789352806787232147424306836308147949111666715808791427277978458797568851671196264589116959710958814940156954017164484026051464748476957214453607247472252286994548584919489930732371836653033374587233770333435524340661339139322580749790411436007374686323641295870752260701511085260782876022936527935060907372707621832739923665273199630314639843692863343248676511687867259638158050294469305790127543227338929914893515300527243105226003239028502594215901964790365784742769437971915230405609935958656528261876309921796041783227892099311758855891000527751658961643438505133522707947998591933498266985401645041230467460932072223393119612783879525285322524732091749994910454498635726369720960528407492079577060699042590505572572973581662867059144318656569450406741376557423500741242975866809817876064507882113482189451991807727091161175246714712448934634883152684193703720851612352367249466660238492255445360477351265590356726707024220690782994497572529178872691929333226324179995112692059692968627675074083716574609163492890433247740440391798783109414256278435861703045762083379468376780364013421479231864716499273069313064412943020758141573219176611830231178956700404123083361183931188413766467118475608964398145499638536950308048925727889008672514316703428793508525000217761209333339214741596452974356481066640569967728779168456501875097945586523764617952383760089900807427414013510168523099075463819354311151705390780802109141343404569844856694326225393467284089889885519437687550968160054725891583880886831249029693035532728688675908316994321640447696712119734639328473263353949550225325694572705556285893579609350742207025781147986480991522133861060051546894263466389725933303183040337782680643718191773480562702527827063089997718343335139511939303391176901810936894855455230367731197941298488272970348178150904012661082318966572689268219387330072492351824789028804378255973050992801387322262352367998421369270886359669989528070426221278641213377895744560033272624805457570903300838441892799294498252906576560077951591496542097271353552146194786680873439683331242331527626320471714037299079135529798733315571076684404193164515090074688849538062858350626589381483863214637732137086643896146854121510450511717100014217860450908232289808351635729432724407686764319306065358256725510155120589576164645806134611744492657902092085982582387597994782742919413186119356891080245251828997133692920345027479916611298797702648009034081178894547967477642075809167095267515604814121402494288732146154417861001451907563181705414563794261337611032418752659222758629135044348490960747573647926239796431933560469276220473027318735289839561636691475629016626773782570056035338006708184491531670034497437867464214382353131652894794019437850983385213060935062534477458935681868299287100738441464535729303538711829375659287252685226396887129312112652582639636722938623366480597198273882023892814025499568601471910207184020691734305894118910523503011039237968505256224505183772720425818664525069140682602714998910297059867787405980317347977639941994842955288117154045819152287642903963635165409798880856841652418492352240110521444971668955989384844044594256703988257545803582526163702327890290334327584247554027927805345861834286276291565371524727921112999488087729631921626631313931028802299643929776451629446151011780793055317609918584194189925561748263708829431682100762015874498532278225838480856583351155729878764324117374348377739766065896465790754667891408056145111171991085603828723502496746342786275470517602428391682740634453181620286232918817092540164629947694584844519726244253966818679295404203393496944603822119051215801122690866985806064785565655716995697556399144167593923869437602568633390873628026701811927167488525415899323065049299464462138750545079221649234540149566004707999553552969569761740504468779484528756933483342155717888935133106951041908440391960861304404926303577944109874972782455656317686737348654062338297186568522964612471572069110052519593648612407764978791734993469440933722631457886152406752378603259252191714249348522048191185104241718513894032973480161921242843100608904688372721562150513616729631158708600790404258121478383346183023321689462724414488085689149729318689825707221752452487316591189596647508015952429056");
    assert(result1 == expected1);
    BigInt num3("512");
    BigInt num4("512");
    BigInt result2 = num3.binaryPower(num4);
    BigInt expected2("14002965526155144834555305452685214372866082888911214819410098563166364393430339704954316846760882417420604004588805172709668950479443731801102542528740113036510299444061547747539391052523594629678962987431385091951024344687624116958504831353788456858187662249641364321767348607606502983077596886259472559892509340453479591701669341690610010199752681859969642725277394461284724377187107117253177142493474639946364494226253006015222273057859996893954087112388911638079340740307953400728723420436588952155758688261952181120583722524183166457598150762152371703020012995588938072866897073390632452049784351496937636259712515524623518773707258808280520421766533723982678808205124377338390350147232981694928107493357143336100099345127583310326317513361407701585332291704561598012157109134338690845941606929566579109845648752432227530123144780633008215865200107064955296873959439674874263446726724444594593399440980900885790456007303431910585281124234213951629658205321241942054284455065419268372128178209253142263303100509032020839738717162419633361923319257010022504665335926405622345740884671364959272460376791398153022984421227494300704089333484168581053903671324229299871114933203089732015328195933736811542888636618070746229101551946063862190952517481681820714828448743184805157114555460571190275103234955695251063616575057295286339621140306864204977859618146869750759448354484860806496256");
    assert(result2 == expected2);
    BigInt num5("512111");
    BigInt num6("512");
    BigInt expected3("15646654121770304976662012040849937172807909943730409674392323559521235236964904887045036126063629407387312669552004487427607075996620736833687512883815412676716078845964924113456790341701983702019321358598188925375203860818977698083638701830871114649514107909717841368374538883082140003121679418324180821621579551396229349393495197848477104999391018847490706878971085928834782198309838781417229647765695597752172300423937279301231075790705803905281786320172037847712762742302592743564157959855765569588504795412386521800025129924713199442302661304294159826780248337042594774407982391451004544764879939789254256569106342246231291343004155731428510290452076429131630622864157592288456878728165452782893236851714696161493770999660100325066607349556899900723948807234886099846273269994940237904504647125221993768287563254039571945170449258024128840314451161839764094786043212222632905897795828477940798720757677110175307091539940508466370685109809248883131323679314909086394326965638828549741458916969111311212981212359610546693121016207429044624570339979245525650933048518951465300832182570077516168014271088977916803690702285118437838605149024652554699947340032287966291794063933142411003664421518961225468789184552004445564578042162982863009552544179261013384819315982502094520418877099895144609176488573675857229706415906773747477953843278925262327376878807923896189084890090820846681191922438144907655137420176836133391455522360966698232326515251521747773396733434395780196049508652707822910083158083688273971403764377321941135789417876712697150649020156989133312560145611427301430949186708699304968855636520677364626418362854266092978641382994707929564002210730364547856778374279495105172226694886090713903547272703058251532219587494762173426745475636023823570547263794118698717644640041364717337938226684987368198750353902780227098956964560071710134670552208169043766652439580364450215347413307722153275967117734520766766853325807700224208744414137609395037985031698613764158252117570281315909773192910369450744484942786651444341824671926735764716951613290805853774761946029961811861635365445756350414842941615672131162553135609385180472215220076116180501887228343526548177851765924504050466508719696134132601893078109433173524370810967972537710319160240240585198261980086424675012130062620659786754423390605097775360622706352969935847430867126895206349615810151542813411656923688586383492326562850912428539179034631202333252023136090206937233992034151937089807405101819348291706159289556956889360317706563213012280766294743817522129401380962804213985062310857995728034607078894436218782868569896368936052581053260035416406989347412636716660784145356489489393393305819350825005735278205883932882776316600511684364775498592136445720007819708210121172139254083263550826347227973469114945517513008996999991408642695217071640538237339917301957921215837459594098025924057426985195230664885648644089974873968968531954814033921");
    BigInt result3 = num5.binaryPower(num6);
    assert(result3 == expected3);
}

static void TestQuaryPow() {
    BigInt num1("12346");
    BigInt result1 = num1.quaryPower(1424, 2);
    BigInt expected1("2154826097232739504237771661671012755446050643784636329069923851010293200090130872533132917890211520272189984488791174670505901551384190966934551938507022637299710553657493961345980693339692543205352595344105065802847995338306399145530373881873541564797333674469978798241083555310992641485997796822088856155701137402716317394261587580362869135699774915540761606045191437944573689163173838082603817837655851950296412628483018626835336559565148424536592317496269787873452378942879362012737229670974430709017828129557399585453438804195934352468352218885989961933312192949945859602817457290447466637640375271635850491475831735907053852907536265194579688814897590669770800566560075295961915046940014245069111719952600049183712600118169254657552666494092729396571435858147859780975502384794244219770670010606750135633229088631510002260138960433839524505834119202875967005874381291807524401370568371357614159609347135810997712059276508969536854919291509068475454350286076345078171814187891406388050439442792827632114722634102324686054339907530908381785553191030687897419834968092177064562655258726431023831927078626915848585126765664238957166539540592607550988067146047521380661215538346993434465901470291306726250272347924183097230356070615127285351897682573198386375796186574228765550487727458010389227665221261928994007962527300792034703804873569660870960154750667652399566101267696760694721867383973529507625344470477774400408048198943380600700196064940552485509909705968644029735125679365090402631833317404782113485654286960131617420444713537869348640505382887174938898366918814733910123038886908789352806787232147424306836308147949111666715808791427277978458797568851671196264589116959710958814940156954017164484026051464748476957214453607247472252286994548584919489930732371836653033374587233770333435524340661339139322580749790411436007374686323641295870752260701511085260782876022936527935060907372707621832739923665273199630314639843692863343248676511687867259638158050294469305790127543227338929914893515300527243105226003239028502594215901964790365784742769437971915230405609935958656528261876309921796041783227892099311758855891000527751658961643438505133522707947998591933498266985401645041230467460932072223393119612783879525285322524732091749994910454498635726369720960528407492079577060699042590505572572973581662867059144318656569450406741376557423500741242975866809817876064507882113482189451991807727091161175246714712448934634883152684193703720851612352367249466660238492255445360477351265590356726707024220690782994497572529178872691929333226324179995112692059692968627675074083716574609163492890433247740440391798783109414256278435861703045762083379468376780364013421479231864716499273069313064412943020758141573219176611830231178956700404123083361183931188413766467118475608964398145499638536950308048925727889008672514316703428793508525000217761209333339214741596452974356481066640569967728779168456501875097945586523764617952383760089900807427414013510168523099075463819354311151705390780802109141343404569844856694326225393467284089889885519437687550968160054725891583880886831249029693035532728688675908316994321640447696712119734639328473263353949550225325694572705556285893579609350742207025781147986480991522133861060051546894263466389725933303183040337782680643718191773480562702527827063089997718343335139511939303391176901810936894855455230367731197941298488272970348178150904012661082318966572689268219387330072492351824789028804378255973050992801387322262352367998421369270886359669989528070426221278641213377895744560033272624805457570903300838441892799294498252906576560077951591496542097271353552146194786680873439683331242331527626320471714037299079135529798733315571076684404193164515090074688849538062858350626589381483863214637732137086643896146854121510450511717100014217860450908232289808351635729432724407686764319306065358256725510155120589576164645806134611744492657902092085982582387597994782742919413186119356891080245251828997133692920345027479916611298797702648009034081178894547967477642075809167095267515604814121402494288732146154417861001451907563181705414563794261337611032418752659222758629135044348490960747573647926239796431933560469276220473027318735289839561636691475629016626773782570056035338006708184491531670034497437867464214382353131652894794019437850983385213060935062534477458935681868299287100738441464535729303538711829375659287252685226396887129312112652582639636722938623366480597198273882023892814025499568601471910207184020691734305894118910523503011039237968505256224505183772720425818664525069140682602714998910297059867787405980317347977639941994842955288117154045819152287642903963635165409798880856841652418492352240110521444971668955989384844044594256703988257545803582526163702327890290334327584247554027927805345861834286276291565371524727921112999488087729631921626631313931028802299643929776451629446151011780793055317609918584194189925561748263708829431682100762015874498532278225838480856583351155729878764324117374348377739766065896465790754667891408056145111171991085603828723502496746342786275470517602428391682740634453181620286232918817092540164629947694584844519726244253966818679295404203393496944603822119051215801122690866985806064785565655716995697556399144167593923869437602568633390873628026701811927167488525415899323065049299464462138750545079221649234540149566004707999553552969569761740504468779484528756933483342155717888935133106951041908440391960861304404926303577944109874972782455656317686737348654062338297186568522964612471572069110052519593648612407764978791734993469440933722631457886152406752378603259252191714249348522048191185104241718513894032973480161921242843100608904688372721562150513616729631158708600790404258121478383346183023321689462724414488085689149729318689825707221752452487316591189596647508015952429056");
    assert(result1 == expected1);
    BigInt num3("512");
    BigInt result2 = num3.quaryPower(512, 8);
    BigInt expected2("14002965526155144834555305452685214372866082888911214819410098563166364393430339704954316846760882417420604004588805172709668950479443731801102542528740113036510299444061547747539391052523594629678962987431385091951024344687624116958504831353788456858187662249641364321767348607606502983077596886259472559892509340453479591701669341690610010199752681859969642725277394461284724377187107117253177142493474639946364494226253006015222273057859996893954087112388911638079340740307953400728723420436588952155758688261952181120583722524183166457598150762152371703020012995588938072866897073390632452049784351496937636259712515524623518773707258808280520421766533723982678808205124377338390350147232981694928107493357143336100099345127583310326317513361407701585332291704561598012157109134338690845941606929566579109845648752432227530123144780633008215865200107064955296873959439674874263446726724444594593399440980900885790456007303431910585281124234213951629658205321241942054284455065419268372128178209253142263303100509032020839738717162419633361923319257010022504665335926405622345740884671364959272460376791398153022984421227494300704089333484168581053903671324229299871114933203089732015328195933736811542888636618070746229101551946063862190952517481681820714828448743184805157114555460571190275103234955695251063616575057295286339621140306864204977859618146869750759448354484860806496256");
    assert(result2 == expected2);
    BigInt num5("512111");
    BigInt expected3("15646654121770304976662012040849937172807909943730409674392323559521235236964904887045036126063629407387312669552004487427607075996620736833687512883815412676716078845964924113456790341701983702019321358598188925375203860818977698083638701830871114649514107909717841368374538883082140003121679418324180821621579551396229349393495197848477104999391018847490706878971085928834782198309838781417229647765695597752172300423937279301231075790705803905281786320172037847712762742302592743564157959855765569588504795412386521800025129924713199442302661304294159826780248337042594774407982391451004544764879939789254256569106342246231291343004155731428510290452076429131630622864157592288456878728165452782893236851714696161493770999660100325066607349556899900723948807234886099846273269994940237904504647125221993768287563254039571945170449258024128840314451161839764094786043212222632905897795828477940798720757677110175307091539940508466370685109809248883131323679314909086394326965638828549741458916969111311212981212359610546693121016207429044624570339979245525650933048518951465300832182570077516168014271088977916803690702285118437838605149024652554699947340032287966291794063933142411003664421518961225468789184552004445564578042162982863009552544179261013384819315982502094520418877099895144609176488573675857229706415906773747477953843278925262327376878807923896189084890090820846681191922438144907655137420176836133391455522360966698232326515251521747773396733434395780196049508652707822910083158083688273971403764377321941135789417876712697150649020156989133312560145611427301430949186708699304968855636520677364626418362854266092978641382994707929564002210730364547856778374279495105172226694886090713903547272703058251532219587494762173426745475636023823570547263794118698717644640041364717337938226684987368198750353902780227098956964560071710134670552208169043766652439580364450215347413307722153275967117734520766766853325807700224208744414137609395037985031698613764158252117570281315909773192910369450744484942786651444341824671926735764716951613290805853774761946029961811861635365445756350414842941615672131162553135609385180472215220076116180501887228343526548177851765924504050466508719696134132601893078109433173524370810967972537710319160240240585198261980086424675012130062620659786754423390605097775360622706352969935847430867126895206349615810151542813411656923688586383492326562850912428539179034631202333252023136090206937233992034151937089807405101819348291706159289556956889360317706563213012280766294743817522129401380962804213985062310857995728034607078894436218782868569896368936052581053260035416406989347412636716660784145356489489393393305819350825005735278205883932882776316600511684364775498592136445720007819708210121172139254083263550826347227973469114945517513008996999991408642695217071640538237339917301957921215837459594098025924057426985195230664885648644089974873968968531954814033921");
    BigInt result3 = num5.quaryPower(512, 4);
    assert(result3 == expected3);
}

static void TestMontgomery() {
    BigInt num1("36363");
    BigInt num2("139393");
    BigInt num3("533");
    BigInt expected1("274");
    BigInt r("4294967296");
    BigInt r1, r2;
    BigInt result1 = num1.montgomeryProd(num1, num2, num3, r1, r, r2);
    assert(result1 == expected1);
    std::cout << "Montgomery complete" << std::endl;
}

static void startTests() {
    TestSum();
    TestSub();
    TestDivision();
    TestMultiplyColumn();
    TestMultiplyKaratsuba();
    TestGCD();
    TestExtendedGCD();
    TestShiftLeft();
    TestShiftRight();
    TestBinaryPow();
    TestQuaryPow();
    TestMontgomery();
}